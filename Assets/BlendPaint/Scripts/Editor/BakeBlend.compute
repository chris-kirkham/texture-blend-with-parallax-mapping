#pragma kernel BakeBlend

#define GROUP_SIZE 8

#include "blendsBakeBlend.cginc"

//output maps
RWTexture2D<float4> BlendedAlbedo;
RWTexture2D<float4> BlendedHRMA;
RWTexture2D<float3> BlendedNormal;

//input maps
Texture2D<float4> baseAlbedo, tex1Albedo, tex2Albedo, tex3Albedo;
Texture2D<float4> baseHRMA, tex1HRMA, tex2HRMA, tex3HRMA;
Texture2D<float4> baseNormal, tex1Normal, tex2Normal, tex3Normal;
Texture2D<float3> blendMap;

//blend params
float blendFactor;

inline float3 UnpackNormalDXT5nm(float4 packednormal)
{
    float3 normal;
    normal.xy = packednormal.wy * 2 - 1;
#if defined(SHADER_API_FLASH)
    // Flash does not have efficient saturate(), and dot() seems to require an extra register.
    normal.z = sqrt(1 - normal.x*normal.x - normal.y * normal.y);
#else
    normal.z = sqrt(1 - saturate(dot(normal.xy, normal.xy)));
#endif
    return normal;
}

inline float3 UnpackNormal(float4 packednormal)
{
#if (defined(SHADER_API_GLES) || defined(SHADER_API_GLES3)) && defined(SHADER_API_MOBILE)
    return packednormal.xyz * 2 - 1;
#else
    return UnpackNormalDXT5nm(packednormal);
#endif
}

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void BakeBlend (uint3 id : SV_DispatchThreadID)
{
    float2 uv = id.xy;

    //get blend amounts from heightmaps and blend map
    float3 blendAmounts = getBlendAmounts(baseHRMA[uv].r, tex1HRMA[uv].r, tex2HRMA[uv].r, tex3HRMA[uv].r, blendMap[uv], blendFactor);

    //get blended texture maps from blend amounts
    BlendedAlbedo[uv] = getColFromBlendAmounts(baseAlbedo[uv], tex1Albedo[uv], tex2Albedo[uv], tex3Albedo[uv], blendAmounts); //albedo
    BlendedHRMA[uv] = getColFromBlendAmounts(baseHRMA[uv], tex1HRMA[uv], tex2HRMA[uv], tex3HRMA[uv], blendAmounts); //height/metallic/roughness/AO
    //TODO: fix normal map
    BlendedNormal[uv] = UnpackNormal(getColFromBlendAmounts(baseNormal[uv], tex1Normal[uv], tex2Normal[uv], tex3Normal[uv], blendAmounts)); //normal
}
